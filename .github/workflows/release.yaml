name: Release Shared Helm Charts

on:
  push:
    branches:
      - main
    paths:
      - 'charts/**/*'  # Match any file under charts directory
      - '.github/workflows/release.yaml'  # Also run when workflow file changes

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Debug Information
        run: |
          echo "Current directory contents:"
          ls -la
          echo "\nCharts directory contents:"
          ls -la charts/ || echo "Charts directory not found"
          echo "\nGit status:"
          git status
          echo "\nLast commit:"
          git log -1
          echo "\nChanged files in last commit:"
          git diff-tree --no-commit-id --name-only -r HEAD

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Check for chart changes
        id: check-changes
        run: |
          CHANGED_CHARTS=()
          for chart in charts/*/; do
            if git diff --quiet HEAD^ HEAD "$chart"; then
              echo "No changes in $chart"
            else
              echo "Changes detected in $chart"
              CHART_NAME=$(basename "$chart")
              CHANGED_CHARTS+=("$CHART_NAME")
              # Get current version
              CHART_YAML="$chart/Chart.yaml"
              CURRENT_VERSION=$(grep '^version:' "$CHART_YAML" | awk '{print $2}')
              MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
              MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
              PATCH=$(echo "$CURRENT_VERSION" | cut -d. -f3)
              
              # Bump minor version and reset patch
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              
              # Update version in Chart.yaml
              sed -i "s/^version: .*/version: $NEW_VERSION/" "$CHART_YAML"
              
              # Commit the change
              git add "$CHART_YAML"
              git commit -m "chore: Bump $CHART_NAME version to $NEW_VERSION [skip ci]"
            fi
          done
          
          if [ ${#CHANGED_CHARTS[@]} -gt 0 ]; then
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
            git push
          else
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install Helm
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: azure/setup-helm@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure GitHub Pages
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: actions/configure-pages@v4

      - name: Package Charts
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          mkdir -p .cr-release-packages
          mkdir -p .cr-index
          # Package the chart
          helm package charts/web-application -d .cr-release-packages/
          # Create or update the index
          helm repo index .cr-release-packages/ --url https://samirspatel.github.io/helm-shared
          # Copy the index to both locations
          cp .cr-release-packages/index.yaml .cr-index/index.yaml

      - name: Create Pages Directory
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          mkdir -p .cr-pages
          
          # Create index.html with chart versions table
          cat > .cr-pages/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Helm Chart Repository</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 2rem;
                      line-height: 1.6;
                  }
                  h1 { color: #2F3337; }
                  .install-box {
                      background: #f6f8fa;
                      padding: 1rem;
                      border-radius: 6px;
                      margin: 1rem 0;
                  }
                  table {
                      width: 100%;
                      border-collapse: collapse;
                      margin: 2rem 0;
                  }
                  th, td {
                      text-align: left;
                      padding: 12px;
                      border-bottom: 1px solid #dfe2e5;
                  }
                  th {
                      background-color: #f6f8fa;
                      font-weight: 600;
                  }
                  tr:hover {
                      background-color: #f6f8fa;
                  }
                  .badge {
                      display: inline-block;
                      padding: 4px 8px;
                      border-radius: 12px;
                      font-size: 12px;
                      font-weight: 500;
                      margin-left: 8px;
                  }
                  .latest {
                      background: #2ea44f;
                      color: white;
                  }
                  .version {
                      background: #e1e4e8;
                      color: #24292e;
                  }
                  .chart-name {
                      font-weight: 600;
                      color: #0366d6;
                  }
                  .description {
                      color: #586069;
                      max-width: 400px;
                  }
                  .install-cmd {
                      background: #1b1f23;
                      color: #fff;
                      padding: 1rem;
                      border-radius: 6px;
                      font-family: monospace;
                  }
              </style>
          </head>
          <body>
              <h1>Helm Chart Repository</h1>
              
              <div class="install-box">
                  <p><strong>Add this repository to Helm:</strong></p>
                  <pre class="install-cmd">helm repo add helm-shared https://samirspatel.github.io/helm-shared
          helm repo update</pre>
              </div>
              
              <h2>Available Charts</h2>
              <table>
                  <thead>
                      <tr>
                          <th>Chart Name</th>
                          <th>Version</th>
                          <th>Description</th>
                          <th>Created</th>
                      </tr>
                  </thead>
                  <tbody>
          EOF
          
          # Parse index.yaml and add entries to the table
          echo "Parsing chart versions..."
          python3 -c '
          import yaml
          import datetime
          from collections import defaultdict
          
          def format_date(date_str):
              dt = datetime.datetime.strptime(date_str[:19], "%Y-%m-%dT%H:%M:%S")
              return dt.strftime("%Y-%m-%d %H:%M")
          
          with open(".cr-release-packages/index.yaml", "r") as f:
              index = yaml.safe_load(f)
          
          # Group entries by chart name
          chart_groups = defaultdict(list)
          for name, entries in index["entries"].items():
              for entry in entries:
                  chart_groups[name].append(entry)
          
          # Sort each group by version (semver)
          for name, entries in chart_groups.items():
              entries.sort(key=lambda x: [int(i) for i in x["version"].split(".")], reverse=True)
          
          with open(".cr-pages/index.html", "a") as f:
              for name, entries in sorted(chart_groups.items()):
                  # First entry in sorted list is latest
                  latest_version = entries[0]["version"]
                  
                  # Output all versions
                  for chart in entries:
                      version = chart["version"]
                      is_latest = version == latest_version
                      latest_badge = " <span class=\"badge latest\">latest</span>" if is_latest else ""
                      
                      created = format_date(chart["created"])
                      
                      f.write(f"""
                          <tr>
                              <td class="chart-name">{chart["name"]}</td>
                              <td>
                                  <span class="badge version">{version}</span>{latest_badge}
                              </td>
                              <td class="description">{chart["description"]}</td>
                              <td>{created}</td>
                          </tr>
                      """)
          '
          
          # Close the HTML
          cat >> .cr-pages/index.html << 'EOF'
                  </tbody>
              </table>
              
              <h2>Usage</h2>
              <p>To install a specific version:</p>
              <pre class="install-cmd">helm install my-release helm-shared/CHART_NAME --version VERSION</pre>
              
              <p>To install the latest version:</p>
              <pre class="install-cmd">helm install my-release helm-shared/CHART_NAME</pre>
              
              <div class="install-box">
                  <p><strong>Note:</strong> Replace <code>CHART_NAME</code> with the name of the chart you want to install (e.g., web-application)</p>
              </div>
          </body>
          </html>
          EOF
          
          # Copy chart packages and index
          cp -R .cr-release-packages/* .cr-pages/
          
          # Debug: List contents
          echo "Contents of .cr-pages:"
          ls -la .cr-pages/

      - name: Upload Pages Artifact
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: .cr-pages

      - name: Deploy to GitHub Pages
        if: steps.check-changes.outputs.has_changes == 'true'
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} 